.data
LsmJJaRFAnsQiiEvWJTC: .asciiz "Digite os valores de um vetor de "
twMVDyyABmoreNcOMjIz: .asciiz " inteiros"
jfMyQuJdaGJQsJUgJxeT: .asciiz "Digite o valor do elemento "
NcsrXngirwRPJGRVImgI: .asciiz "Vetor ordenado: "
PeACAXDQjhXBPSuoHuEi: .asciiz " "

.text
.globl main
main:
addiu $sp, $sp, -4 # reservando espaço variável vet
li    $v0, 9 # aloca vetor vet
li    $a0, 40
syscall
move  $s0, $v0
sw    $s0, 0($sp) # fim aloca vetor vet
addiu $sp, $sp, -4 # reservando espaço variável i
addiu $sp, $sp, -4 # reservando espaço variável tamanho
li    $s0, 10 # empilhando inteiro literal 10
addiu $sp, $sp, -4
sw    $s0, 0($sp)
lw    $t0, 0($sp) # atribuindo à variável local tamanho
sw    $t0, 4($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 4
la    $s0, LsmJJaRFAnsQiiEvWJTC # empilhando endereço de string literal
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# inicio escreva
li    $v0, 4
lw    $a0, 0($sp)
syscall # fim escreva
lw    $s0, 0($sp)
addiu $sp, $sp, 4
lw    $s0, 0($sp) # lendo variável local tamanho
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local tamanho
# inicio escreva
li    $v0, 1
lw    $a0, 0($sp)
syscall # fim escreva
lw    $s0, 0($sp)
addiu $sp, $sp, 4
la    $s0, twMVDyyABmoreNcOMjIz # empilhando endereço de string literal
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# inicio escreva
li    $v0, 4
lw    $a0, 0($sp)
syscall # fim escreva
lw    $s0, 0($sp)
addiu $sp, $sp, 4
li    $v0, 11 # novaLinha
li    $a0, 10
syscall       # fim novaLinha
li    $s0, 0 # empilhando inteiro literal 0
addiu $sp, $sp, -4
sw    $s0, 0($sp)
lw    $t0, 0($sp) # atribuindo à variável local i
sw    $t0, 8($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 4
# inicio comando enquanto
enquantoInicio_mUaUoZMivYSguWUEtyvg:
# menor
lw    $s0, 4($sp) # lendo variável local i
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local i
lw    $s0, 4($sp) # lendo variável local tamanho
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local tamanho
lw    $t1, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 0($sp)
addiu $sp, $sp, 4
slt   $t0, $t0, $t1 # verifica se $t0 < $t1, resultado em $t0
addiu $sp, $sp, -4
sw    $t0, 0($sp)
# fim menor
lw    $t0, 0($sp)
addiu $sp, $sp, 4
beqz  $t0, enquantoFim_QgTxBdNeUMLbWfWTsMMh
la    $s0, jfMyQuJdaGJQsJUgJxeT # empilhando endereço de string literal
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# inicio escreva
li    $v0, 4
lw    $a0, 0($sp)
syscall # fim escreva
lw    $s0, 0($sp)
addiu $sp, $sp, 4
# soma
lw    $s0, 4($sp) # lendo variável local i
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local i
li    $s0, 1 # empilhando inteiro literal 1
addiu $sp, $sp, -4
sw    $s0, 0($sp)
lw    $t1, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 0($sp)
addiu $sp, $sp, 4
add   $t0, $t0, $t1 # soma $t0 e $s1, resultado em $t0
addiu $sp, $sp, -4
sw    $t0, 0($sp)
# fim soma
# inicio escreva
li    $v0, 1
lw    $a0, 0($sp)
syscall # fim escreva
lw    $s0, 0($sp)
addiu $sp, $sp, 4
li    $v0, 11 # novaLinha
li    $a0, 10
syscall       # fim novaLinha
# inicio comando leia
li    $v0, 5 # syscall para ler inteiro
syscall
addiu $sp, $sp, -4
sw    $v0, 0($sp)
# fim comando leia
lw    $s0, 8($sp) # lendo variável local i
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local i
lw    $s0, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 12($sp) # carrega endereço do vetor em $t0 vet
li    $t1, 4
mul   $t1, $t1, $s0 # tamanho elemento * index
add   $t0, $t1, $t0 # soma o endereço com o index * tamanho
lw    $t3, 0($sp) # lê o valor a ser armazenado
sw    $t3, 0($t0) # armazena int
lw    $s0, 0($sp)
addiu $sp, $sp, 4
# soma
lw    $s0, 4($sp) # lendo variável local i
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local i
li    $s0, 1 # empilhando inteiro literal 1
addiu $sp, $sp, -4
sw    $s0, 0($sp)
lw    $t1, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 0($sp)
addiu $sp, $sp, 4
add   $t0, $t0, $t1 # soma $t0 e $s1, resultado em $t0
addiu $sp, $sp, -4
sw    $t0, 0($sp)
# fim soma
lw    $t0, 0($sp) # atribuindo à variável local i
sw    $t0, 8($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 4
j     enquantoInicio_mUaUoZMivYSguWUEtyvg
enquantoFim_QgTxBdNeUMLbWfWTsMMh: # fim comando enquanto
# fim comando enquanto
# inicio chamada da função quickSortPrincipal
addiu $sp, $sp, -4 # reservando espaço para o endereço de retorno da função
lw    $s0, 12($sp) # lendo variável local vet
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local vet
lw    $s0, 8($sp) # lendo variável local tamanho
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local tamanho
jal    quickSortPrincipal # chama a função quickSortPrincipal
addiu $sp, $sp, -4
sw    $v0, 0($sp)
# fim chamada da função quickSortPrincipal
lw    $s0, 0($sp)
addiu $sp, $sp, 4
la    $s0, NcsrXngirwRPJGRVImgI # empilhando endereço de string literal
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# inicio escreva
li    $v0, 4
lw    $a0, 0($sp)
syscall # fim escreva
lw    $s0, 0($sp)
addiu $sp, $sp, 4
li    $v0, 11 # novaLinha
li    $a0, 10
syscall       # fim novaLinha
li    $s0, 0 # empilhando inteiro literal 0
addiu $sp, $sp, -4
sw    $s0, 0($sp)
lw    $t0, 0($sp) # atribuindo à variável local i
sw    $t0, 8($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 4
# inicio comando enquanto
enquantoInicio_BswBeaIoizJoYxiWnWlV:
# menor
lw    $s0, 4($sp) # lendo variável local i
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local i
lw    $s0, 4($sp) # lendo variável local tamanho
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local tamanho
lw    $t1, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 0($sp)
addiu $sp, $sp, 4
slt   $t0, $t0, $t1 # verifica se $t0 < $t1, resultado em $t0
addiu $sp, $sp, -4
sw    $t0, 0($sp)
# fim menor
lw    $t0, 0($sp)
addiu $sp, $sp, 4
beqz  $t0, enquantoFim_aaiFLELmApgjjbTQvNXC
lw    $s0, 4($sp) # lendo variável local i
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local i
# lendo vetor local indexado vet
lw    $t0, 12($sp) # lendo endereço do vetor
lw    $s0, 0($sp)
addiu $sp, $sp, 4
li    $t1, 4
mul   $t1, $t1, $s0 # tamanho elemento * index
add   $t0, $t0, $t1
lw    $s0, 0($t0) # lê inteiro
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo vetor local indexado vet
# inicio escreva
li    $v0, 1
lw    $a0, 0($sp)
syscall # fim escreva
lw    $s0, 0($sp)
addiu $sp, $sp, 4
la    $s0, PeACAXDQjhXBPSuoHuEi # empilhando endereço de string literal
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# inicio escreva
li    $v0, 4
lw    $a0, 0($sp)
syscall # fim escreva
lw    $s0, 0($sp)
addiu $sp, $sp, 4
# soma
lw    $s0, 4($sp) # lendo variável local i
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local i
li    $s0, 1 # empilhando inteiro literal 1
addiu $sp, $sp, -4
sw    $s0, 0($sp)
lw    $t1, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 0($sp)
addiu $sp, $sp, 4
add   $t0, $t0, $t1 # soma $t0 e $s1, resultado em $t0
addiu $sp, $sp, -4
sw    $t0, 0($sp)
# fim soma
lw    $t0, 0($sp) # atribuindo à variável local i
sw    $t0, 8($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 4
j     enquantoInicio_BswBeaIoizJoYxiWnWlV
enquantoFim_aaiFLELmApgjjbTQvNXC: # fim comando enquanto
# fim comando enquanto
addiu $sp, $sp, 12 # reajusta stack bloco
li    $v0, 10 # finalizando programa
syscall       # fim main

partition:
sw    $ra, 12($sp)
addiu $sp, $sp, -4 # reservando espaço variável pivo
addiu $sp, $sp, -4 # reservando espaço variável i
addiu $sp, $sp, -4 # reservando espaço variável temp
addiu $sp, $sp, -4 # reservando espaço variável j
lw    $s0, 16($sp) # lendo variável local alto
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local alto
# lendo vetor local indexado vet
lw    $t0, 28($sp) # lendo endereço do vetor
lw    $s0, 0($sp)
addiu $sp, $sp, 4
li    $t1, 4
mul   $t1, $t1, $s0 # tamanho elemento * index
add   $t0, $t0, $t1
lw    $s0, 0($t0) # lê inteiro
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo vetor local indexado vet
lw    $t0, 0($sp) # atribuindo à variável local pivo
sw    $t0, 16($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 4
# subtração
lw    $s0, 20($sp) # lendo variável local baixo
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local baixo
li    $s0, 1 # empilhando inteiro literal 1
addiu $sp, $sp, -4
sw    $s0, 0($sp)
lw    $t1, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 0($sp)
addiu $sp, $sp, 4
sub   $t0, $t0, $t1 # subtrai $t1 de $t0, resultado em $t0
addiu $sp, $sp, -4
sw    $t0, 0($sp)
# fim subtração
lw    $t0, 0($sp) # atribuindo à variável local i
sw    $t0, 12($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 4
lw    $s0, 20($sp) # lendo variável local baixo
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local baixo
lw    $t0, 0($sp) # atribuindo à variável local j
sw    $t0, 4($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 4
# inicio comando enquanto
enquantoInicio_tYotfeCwbrWBgaajsmEn:
# menor
lw    $s0, 0($sp) # lendo variável local j
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local j
lw    $s0, 20($sp) # lendo variável local alto
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local alto
lw    $t1, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 0($sp)
addiu $sp, $sp, 4
slt   $t0, $t0, $t1 # verifica se $t0 < $t1, resultado em $t0
addiu $sp, $sp, -4
sw    $t0, 0($sp)
# fim menor
lw    $t0, 0($sp)
addiu $sp, $sp, 4
beqz  $t0, enquantoFim_QtLRIRYVXjBJxrYWTnAw
# inicio comando se
# menor
lw    $s0, 0($sp) # lendo variável local j
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local j
# lendo vetor local indexado vet
lw    $t0, 28($sp) # lendo endereço do vetor
lw    $s0, 0($sp)
addiu $sp, $sp, 4
li    $t1, 4
mul   $t1, $t1, $s0 # tamanho elemento * index
add   $t0, $t0, $t1
lw    $s0, 0($t0) # lê inteiro
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo vetor local indexado vet
lw    $s0, 16($sp) # lendo variável local pivo
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local pivo
lw    $t1, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 0($sp)
addiu $sp, $sp, 4
slt   $t0, $t0, $t1 # verifica se $t0 < $t1, resultado em $t0
addiu $sp, $sp, -4
sw    $t0, 0($sp)
# fim menor
lw    $t0, 0($sp)
addiu $sp, $sp, 4
beqz  $t0, seFalse_fZYeOaxVINtZIDuvirxT
# soma
lw    $s0, 8($sp) # lendo variável local i
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local i
li    $s0, 1 # empilhando inteiro literal 1
addiu $sp, $sp, -4
sw    $s0, 0($sp)
lw    $t1, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 0($sp)
addiu $sp, $sp, 4
add   $t0, $t0, $t1 # soma $t0 e $s1, resultado em $t0
addiu $sp, $sp, -4
sw    $t0, 0($sp)
# fim soma
lw    $t0, 0($sp) # atribuindo à variável local i
sw    $t0, 12($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 4
lw    $s0, 8($sp) # lendo variável local i
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local i
# lendo vetor local indexado vet
lw    $t0, 28($sp) # lendo endereço do vetor
lw    $s0, 0($sp)
addiu $sp, $sp, 4
li    $t1, 4
mul   $t1, $t1, $s0 # tamanho elemento * index
add   $t0, $t0, $t1
lw    $s0, 0($t0) # lê inteiro
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo vetor local indexado vet
lw    $t0, 0($sp) # atribuindo à variável local temp
sw    $t0, 8($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 4
lw    $s0, 0($sp) # lendo variável local j
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local j
# lendo vetor local indexado vet
lw    $t0, 28($sp) # lendo endereço do vetor
lw    $s0, 0($sp)
addiu $sp, $sp, 4
li    $t1, 4
mul   $t1, $t1, $s0 # tamanho elemento * index
add   $t0, $t0, $t1
lw    $s0, 0($t0) # lê inteiro
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo vetor local indexado vet
lw    $s0, 12($sp) # lendo variável local i
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local i
lw    $s0, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 28($sp) # carrega endereço do vetor em $t0 vet
li    $t1, 4
mul   $t1, $t1, $s0 # tamanho elemento * index
add   $t0, $t1, $t0 # soma o endereço com o index * tamanho
lw    $t3, 0($sp) # lê o valor a ser armazenado
sw    $t3, 0($t0) # armazena int
lw    $s0, 0($sp)
addiu $sp, $sp, 4
lw    $s0, 4($sp) # lendo variável local temp
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local temp
lw    $s0, 4($sp) # lendo variável local j
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local j
lw    $s0, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 28($sp) # carrega endereço do vetor em $t0 vet
li    $t1, 4
mul   $t1, $t1, $s0 # tamanho elemento * index
add   $t0, $t1, $t0 # soma o endereço com o index * tamanho
lw    $t3, 0($sp) # lê o valor a ser armazenado
sw    $t3, 0($t0) # armazena int
lw    $s0, 0($sp)
addiu $sp, $sp, 4
seFalse_fZYeOaxVINtZIDuvirxT:
seFim_UPbTYTIFfhknwJPydosY: # fim comando se
# soma
lw    $s0, 0($sp) # lendo variável local j
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local j
li    $s0, 1 # empilhando inteiro literal 1
addiu $sp, $sp, -4
sw    $s0, 0($sp)
lw    $t1, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 0($sp)
addiu $sp, $sp, 4
add   $t0, $t0, $t1 # soma $t0 e $s1, resultado em $t0
addiu $sp, $sp, -4
sw    $t0, 0($sp)
# fim soma
lw    $t0, 0($sp) # atribuindo à variável local j
sw    $t0, 4($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 4
j     enquantoInicio_tYotfeCwbrWBgaajsmEn
enquantoFim_QtLRIRYVXjBJxrYWTnAw: # fim comando enquanto
# fim comando enquanto
# soma
lw    $s0, 8($sp) # lendo variável local i
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local i
li    $s0, 1 # empilhando inteiro literal 1
addiu $sp, $sp, -4
sw    $s0, 0($sp)
lw    $t1, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 0($sp)
addiu $sp, $sp, 4
add   $t0, $t0, $t1 # soma $t0 e $s1, resultado em $t0
addiu $sp, $sp, -4
sw    $t0, 0($sp)
# fim soma
# lendo vetor local indexado vet
lw    $t0, 28($sp) # lendo endereço do vetor
lw    $s0, 0($sp)
addiu $sp, $sp, 4
li    $t1, 4
mul   $t1, $t1, $s0 # tamanho elemento * index
add   $t0, $t0, $t1
lw    $s0, 0($t0) # lê inteiro
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo vetor local indexado vet
lw    $t0, 0($sp) # atribuindo à variável local temp
sw    $t0, 8($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 4
lw    $s0, 16($sp) # lendo variável local alto
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local alto
# lendo vetor local indexado vet
lw    $t0, 28($sp) # lendo endereço do vetor
lw    $s0, 0($sp)
addiu $sp, $sp, 4
li    $t1, 4
mul   $t1, $t1, $s0 # tamanho elemento * index
add   $t0, $t0, $t1
lw    $s0, 0($t0) # lê inteiro
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo vetor local indexado vet
# soma
lw    $s0, 12($sp) # lendo variável local i
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local i
li    $s0, 1 # empilhando inteiro literal 1
addiu $sp, $sp, -4
sw    $s0, 0($sp)
lw    $t1, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 0($sp)
addiu $sp, $sp, 4
add   $t0, $t0, $t1 # soma $t0 e $s1, resultado em $t0
addiu $sp, $sp, -4
sw    $t0, 0($sp)
# fim soma
lw    $s0, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 28($sp) # carrega endereço do vetor em $t0 vet
li    $t1, 4
mul   $t1, $t1, $s0 # tamanho elemento * index
add   $t0, $t1, $t0 # soma o endereço com o index * tamanho
lw    $t3, 0($sp) # lê o valor a ser armazenado
sw    $t3, 0($t0) # armazena int
lw    $s0, 0($sp)
addiu $sp, $sp, 4
lw    $s0, 4($sp) # lendo variável local temp
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local temp
lw    $s0, 20($sp) # lendo variável local alto
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local alto
lw    $s0, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 28($sp) # carrega endereço do vetor em $t0 vet
li    $t1, 4
mul   $t1, $t1, $s0 # tamanho elemento * index
add   $t0, $t1, $t0 # soma o endereço com o index * tamanho
lw    $t3, 0($sp) # lê o valor a ser armazenado
sw    $t3, 0($t0) # armazena int
lw    $s0, 0($sp)
addiu $sp, $sp, 4
# inicio comando retorno
# soma
lw    $s0, 8($sp) # lendo variável local i
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local i
li    $s0, 1 # empilhando inteiro literal 1
addiu $sp, $sp, -4
sw    $s0, 0($sp)
lw    $t1, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 0($sp)
addiu $sp, $sp, 4
add   $t0, $t0, $t1 # soma $t0 e $s1, resultado em $t0
addiu $sp, $sp, -4
sw    $t0, 0($sp)
# fim soma
lw    $v0, 0($sp)
addiu $sp, $sp, 4
addiu $sp, $sp, 16 # reajusta stack bloco retorno
lw    $ra, 12($sp) # lê endereço de retorno do stack
addiu $sp, $sp, 16 # volta o stack (endereço de retorno + parâmetros)
jr    $ra         # retornando da função
# fim comando retorno
addiu $sp, $sp, 16 # reajusta stack bloco
#fim função partition

quickSort:
sw    $ra, 12($sp)
# inicio comando se
# menor
lw    $s0, 4($sp) # lendo variável local baixo
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local baixo
lw    $s0, 4($sp) # lendo variável local alto
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local alto
lw    $t1, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 0($sp)
addiu $sp, $sp, 4
slt   $t0, $t0, $t1 # verifica se $t0 < $t1, resultado em $t0
addiu $sp, $sp, -4
sw    $t0, 0($sp)
# fim menor
lw    $t0, 0($sp)
addiu $sp, $sp, 4
beqz  $t0, seFalse_VFSiXbUOLZxuEncdmOOJ
addiu $sp, $sp, -4 # reservando espaço variável pi
# inicio chamada da função partition
addiu $sp, $sp, -4 # reservando espaço para o endereço de retorno da função
lw    $s0, 16($sp) # lendo variável local vet
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local vet
lw    $s0, 16($sp) # lendo variável local baixo
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local baixo
lw    $s0, 16($sp) # lendo variável local alto
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local alto
jal    partition # chama a função partition
addiu $sp, $sp, -4
sw    $v0, 0($sp)
# fim chamada da função partition
lw    $t0, 0($sp) # atribuindo à variável local pi
sw    $t0, 4($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 4
# inicio chamada da função quickSort
addiu $sp, $sp, -4 # reservando espaço para o endereço de retorno da função
lw    $s0, 16($sp) # lendo variável local vet
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local vet
lw    $s0, 16($sp) # lendo variável local baixo
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local baixo
# subtração
lw    $s0, 12($sp) # lendo variável local pi
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local pi
li    $s0, 1 # empilhando inteiro literal 1
addiu $sp, $sp, -4
sw    $s0, 0($sp)
lw    $t1, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 0($sp)
addiu $sp, $sp, 4
sub   $t0, $t0, $t1 # subtrai $t1 de $t0, resultado em $t0
addiu $sp, $sp, -4
sw    $t0, 0($sp)
# fim subtração
jal    quickSort # chama a função quickSort
addiu $sp, $sp, -4
sw    $v0, 0($sp)
# fim chamada da função quickSort
lw    $s0, 0($sp)
addiu $sp, $sp, 4
# inicio chamada da função quickSort
addiu $sp, $sp, -4 # reservando espaço para o endereço de retorno da função
lw    $s0, 16($sp) # lendo variável local vet
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local vet
# soma
lw    $s0, 8($sp) # lendo variável local pi
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local pi
li    $s0, 1 # empilhando inteiro literal 1
addiu $sp, $sp, -4
sw    $s0, 0($sp)
lw    $t1, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 0($sp)
addiu $sp, $sp, 4
add   $t0, $t0, $t1 # soma $t0 e $s1, resultado em $t0
addiu $sp, $sp, -4
sw    $t0, 0($sp)
# fim soma
lw    $s0, 16($sp) # lendo variável local alto
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local alto
jal    quickSort # chama a função quickSort
addiu $sp, $sp, -4
sw    $v0, 0($sp)
# fim chamada da função quickSort
lw    $s0, 0($sp)
addiu $sp, $sp, 4
addiu $sp, $sp, 4 # reajusta stack bloco
seFalse_VFSiXbUOLZxuEncdmOOJ:
seFim_QewXXcPtTxzgjuZDNFNz: # fim comando se
# inicio comando retorno
li    $s0, 1 # empilhando inteiro literal 1
addiu $sp, $sp, -4
sw    $s0, 0($sp)
lw    $v0, 0($sp)
addiu $sp, $sp, 4
lw    $ra, 12($sp) # lê endereço de retorno do stack
addiu $sp, $sp, 16 # volta o stack (endereço de retorno + parâmetros)
jr    $ra         # retornando da função
# fim comando retorno
#fim função quickSort

quickSortPrincipal:
sw    $ra, 8($sp)
# inicio chamada da função quickSort
addiu $sp, $sp, -4 # reservando espaço para o endereço de retorno da função
lw    $s0, 8($sp) # lendo variável local vet
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local vet
li    $s0, 0 # empilhando inteiro literal 0
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# subtração
lw    $s0, 12($sp) # lendo variável local tamanho
addiu $sp, $sp, -4
sw    $s0, 0($sp)
# fim lendo variável local tamanho
li    $s0, 1 # empilhando inteiro literal 1
addiu $sp, $sp, -4
sw    $s0, 0($sp)
lw    $t1, 0($sp)
addiu $sp, $sp, 4
lw    $t0, 0($sp)
addiu $sp, $sp, 4
sub   $t0, $t0, $t1 # subtrai $t1 de $t0, resultado em $t0
addiu $sp, $sp, -4
sw    $t0, 0($sp)
# fim subtração
jal    quickSort # chama a função quickSort
addiu $sp, $sp, -4
sw    $v0, 0($sp)
# fim chamada da função quickSort
lw    $s0, 0($sp)
addiu $sp, $sp, 4
# inicio comando retorno
li    $s0, 1 # empilhando inteiro literal 1
addiu $sp, $sp, -4
sw    $s0, 0($sp)
lw    $v0, 0($sp)
addiu $sp, $sp, 4
lw    $ra, 8($sp) # lê endereço de retorno do stack
addiu $sp, $sp, 12 # volta o stack (endereço de retorno + parâmetros)
jr    $ra         # retornando da função
# fim comando retorno
#fim função quickSortPrincipal


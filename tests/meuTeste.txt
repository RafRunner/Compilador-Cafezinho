int partition(int vet[], int baixo, int alto) {
    int pivo, i, temp, j;

    pivo = vet[alto];
    i = (baixo - 1);
    j = baixo;

    enquanto (j < alto) execute {
        se (vet[j] < pivo) entao {
            i = i + 1;

            temp = vet[i];
            vet[i] = vet[j];
            vet[j] = temp;
        }
        j = j + 1;
    }

    temp = vet[i + 1];
    vet[i + 1] = vet[alto];
    vet[alto] = temp;

    retorne (i + 1);
}

int quickSort(int vet[], int baixo, int alto) {
    se (baixo < alto) entao {
        int pi;
        pi = partition(vet, baixo, alto);

        quickSort(vet, baixo, pi - 1);
        quickSort(vet, pi + 1, alto);
    }
    retorne 1;
}

int quickSortPrincipal(int vet[], int tamanho) {
    quickSort(vet, 0, tamanho - 1);
    retorne 1;
}

programa {
    int vet[10];
    int i, tamanho;

    tamanho = 10;

    escreva "Digite os valores de um vetor de ";
    escreva tamanho;
    escreva " inteiros";
    novalinha;

    i = 0;
    enquanto (i < tamanho) execute {
        escreva "Digite o valor do elemento ";
        escreva i + 1;
        novalinha;
        leia vet[i];
        i = i + 1;
    }

    quickSortPrincipal(vet, tamanho);

    escreva "Vetor ordenado: ";
    novalinha;
    i = 0;
    enquanto (i < tamanho) execute {
        escreva vet[i];
        escreva " ";
        i = i + 1;
    }
}
